openapi: 3.0.0
info:
  title: Overhyped REST API
  version: 1.0.0
  description: >-
    REST interface for the Overhyped microVM automation platform.
    All endpoints default to `http://127.0.0.1:7777`.
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
servers:
  - url: http://127.0.0.1:7777
paths:
  /healthz:
    get:
      summary: Health check
      description: Returns the health status of the service. Used for simple uptime checks.
      operationId: getHealth
      tags: [health]
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  /api/v1/system/status:
    get:
      summary: System status summary
      description: Provides a summary of the host system's status, including the current number of running VMs and resource utilization.
      operationId: getSystemStatus
      tags: [status]
      responses:
        '200':
          description: Current VM count and resource usage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/vms:
    get:
      summary: List VMs
      description: Retrieves a list of all virtual machines managed by the platform, including their metadata.
      operationId: listVMs
      tags: [vm]
      responses:
        '200':
          description: Array of VM metadata
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VM'
                example:
                  - id: 1
                    name: "demo-vm-1"
                    status: "running"
                    ip_address: "192.168.1.10"
                    mac_address: "00:11:22:33:44:55"
                    cpu_cores: 2
                    memory_mb: 2048
                    kernel_cmdline: "console=ttyS0"
                    pid: 12345
                    created_at: "2023-10-27T10:00:00Z"
                    updated_at: "2023-10-27T10:05:00Z"
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Create VM
      description: Creates and starts a new virtual machine based on the provided configuration.
      operationId: createVM
      tags: [vm]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVMRequest'
      responses:
        '201':
          description: VM created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VM'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/vms/{name}:
    parameters:
      - $ref: '#/components/parameters/VMName'
    get:
      summary: Fetch VM by name
      description: Retrieves the metadata and status for a specific virtual machine identified by its name.
      operationId: getVMByName
      tags: [vm]
      responses:
        '200':
          description: VM metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VM'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Destroy VM
      description: Stops and permanently deletes a virtual machine identified by its name. This action is irreversible.
      operationId: destroyVM
      tags: [vm]
      responses:
        '204':
          description: Deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/vms/{name}/agent/{agentPath}:
    parameters:
      - $ref: '#/components/parameters/VMName'
      - name: agentPath
        in: path
        required: true
        description: Agent-relative path (proxied)
        schema:
          type: string
        example: "exec"
    post:
      summary: Proxy requests to hype-agent
      description: Forwards a request to the hype-agent running inside the specified VM. This is used for executing commands, managing files, and other agent-based interactions.
      operationId: proxyAgentRequest
      tags: [agent]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                command: ["ls", "-la"]
      responses:
        '200':
          description: Agent response
          content:
            application/json:
              schema:
                type: object
                example:
                  stdout: "total 8\ndrwxr-xr-x 2 root root 4096 Oct 27 10:00 .\n"
                  stderr: ""
                  exit_code: 0
        '502':
          $ref: '#/components/responses/BadGateway'
  /api/v1/events/vms:
    get:
      summary: Stream VM lifecycle events (SSE)
      description: Establishes a Server-Sent Events (SSE) connection to stream real-time lifecycle events for all VMs, such as creation, termination, and status changes.
      operationId: streamVMEvents
      tags: [events]
      responses:
        '200':
          description: Server-Sent Events stream of VM events
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/VMEvent'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/mcp:
    post:
      summary: Model Context Protocol endpoint
      description: Endpoint for the Model Context Protocol (MCP) to send commands and receive responses.
      operationId: postMCPCommand
      tags: [mcp]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MCPRequest'
      responses:
        '200':
          description: MCP command response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MCPResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'
  /ws/v1/vms/{name}/devtools/{devToolsPath}:
    get:
      summary: Proxy Chrome DevTools WebSocket
      description: Upgrades the connection to a WebSocket and proxies it to the Chrome DevTools endpoint of the agent inside the specified VM.
      operationId: proxyDevToolsWebSocket
      tags: [agent]
      parameters:
        - $ref: '#/components/parameters/VMName'
        - name: devToolsPath
          in: path
          required: true
          schema:
            type: string
          example: "json/version"
      responses:
        '101':
          description: WebSocket Upgrade
        '204':
          description: Success response for linter compatibility. The actual success code is 101.
        '409':
          $ref: '#/components/responses/Conflict'
        '502':
          $ref: '#/components/responses/BadGateway'
  /ws/v1/vms/{name}/logs:
    get:
      summary: Stream agent logs as WebSocket JSON payloads
      description: Upgrades the connection to a WebSocket to stream logs directly from the hype-agent running inside the specified VM.
      operationId: streamAgentLogs
      tags: [agent]
      parameters:
        - $ref: '#/components/parameters/VMName'
      responses:
        '101':
          description: WebSocket Upgrade
        '204':
          description: Success response for linter compatibility. The actual success code is 101.
        '409':
          $ref: '#/components/responses/Conflict'
        '502':
          $ref: '#/components/responses/BadGateway'
  /ws/v1/agui:
    get:
      summary: Stream AG-UI events
      description: Upgrades the connection to a WebSocket to stream AG-UI events.
      operationId: streamAGUIEvents
      tags: [agui]
      responses:
        '101':
          description: WebSocket Upgrade streaming AG-UI events
        '204':
          description: Success response for linter compatibility. The actual success code is 101.
components:
  parameters:
    VMName:
      name: name
      in: path
      required: true
      schema:
        type: string
      example: demo
  responses:
    BadRequest:
      description: Invalid request payload or parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadGateway:
      description: Upstream agent error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    SystemStatus:
      type: object
      properties:
        vm_count:
          type: integer
          example: 3
        cpu_percent:
          type: number
          format: float
          example: 42.5
        mem_percent:
          type: number
          format: float
          example: 58.1
    VM:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        status:
          type: string
          enum: [pending, running, stopped, crashed]
        ip_address:
          type: string
        mac_address:
          type: string
        cpu_cores:
          type: integer
        memory_mb:
          type: integer
        kernel_cmdline:
          type: string
        pid:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
      example:
        id: 1
        name: "demo-vm"
        status: "running"
        ip_address: "192.168.1.10"
        mac_address: "00:11:22:33:44:55"
        cpu_cores: 2
        memory_mb: 2048
        kernel_cmdline: "console=ttyS0"
        pid: 12345
        created_at: "2023-10-27T10:00:00Z"
        updated_at: "2023-10-27T10:05:00Z"
    CreateVMRequest:
      type: object
      required: [name, cpu_cores, memory_mb]
      properties:
        name:
          type: string
        cpu_cores:
          type: integer
          minimum: 1
        memory_mb:
          type: integer
          minimum: 64
        kernel_cmdline:
          type: string
      example:
        name: "new-web-server"
        cpu_cores: 4
        memory_mb: 4096
        kernel_cmdline: "ro console=ttyS0"
    VMEvent:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        status:
          type: string
        ip_address:
          type: string
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        stream:
          type: string
          nullable: true
        line:
          type: string
          nullable: true
      example:
        type: "vm_status_change"
        name: "demo-vm"
        status: "crashed"
        ip_address: "192.168.1.10"
        timestamp: "2023-10-27T11:00:00Z"
        message: "VM process exited with non-zero status"
        stream: null
        line: null
    Error:
      type: object
      properties:
        error:
          type: string
      example:
        error: "VM with name 'demo' not found."
    MCPRequest:
      type: object
      required: [command]
      properties:
        command:
          type: string
        params:
          type: object
          additionalProperties: true
      example:
        command: "filesystem.read"
        params:
          path: "/etc/hostname"
    MCPResponse:
      type: object
      properties:
        result:
          nullable: true
        error:
          type: string
          nullable: true
      example:
        result: "overhyped-vm"
        error: null
    AGUIEvent:
      oneOf:
        - $ref: '#/components/schemas/RunStartedEvent'
        - $ref: '#/components/schemas/TextMessageEvent'
        - $ref: '#/components/schemas/RunFinishedEvent'
      example:
        type: "text"
        text: "Processing complete."
    RunStartedEvent:
      type: object
      properties:
        type:
          type: string
          enum: [run_started]
        id:
          type: string
        name:
          type: string
      example:
        type: "run_started"
        id: "run-1234f"
        name: "Data Processing Job"
    TextMessageEvent:
      type: object
      properties:
        type:
          type: string
          enum: [text]
        text:
          type: string
      example:
        type: "text"
        text: "Step 1 of 3 completed."
    RunFinishedEvent:
      type: object
      properties:
        type:
          type: string
          enum: [run_finished]
        output:
          type: string
      example:
        type: "run_finished"
        output: "Job finished successfully with result: 42"
        